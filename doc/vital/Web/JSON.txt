*vital/Web/JSON.txt*			JSON parser written in pure Vim script.

Maintainer: mattn <mattn.jp@gmail.com>
            lambdalisue <lambdalisue@hashnote.net>

==============================================================================
CONTENTS				*Vital.Web.JSON-contents*

INTRODUCTION				|Vital.Web.JSON-introduction|
INTERFACE				|Vital.Web.JSON-interface|
  Consts				|Vital.Web.JSON-consts|
  Functions				|Vital.Web.JSON-functions|

==============================================================================
INTRODUCTION				*Vital.Web.JSON-introduction*

*Vital.Web.JSON* is JSON parser Library.

==============================================================================
INTERFACE				*Vital.Web.JSON-interface*

------------------------------------------------------------------------------
CONSTS					*Vital.Web.JSON-consts*

true					*Vital.Web.JSON.true*
	It is used to indicate 'true' in JSON string. It is represented as a
	|Funcref| thus if you assign the value to a variable which name does not
	start with a capital, "s:", "w:", "t:" or "b:" will raise an exception.
	This returns 1 when you use it as a function.

false					*Vital.Web.JSON.false*
	It is used to indicate 'false' in JSON string. It is represented as a
	|Funcref| thus if you assign the value to a variable which name does not
	start with a capital, "s:", "w:", "t:" or "b:" will raise an exception.
	This returns 0 when you use it as a function.

null					*Vital.Web.JSON.null*
	It is used to indicate 'null' in JSON string. It is represented as a
	|Funcref| thus if you assign the value to a variable which name does not
	start with a capital, "s:", "w:", "t:" or "b:" will raise an exception.
	This returns 0 when you use it as a function.

------------------------------------------------------------------------------
FUNCTIONS				*Vital.Web.JSON-functions*

encode({object}[, {settings}])		*Vital.Web.JSON.encode()*
	Encode an object into a JSON string. Special tokens
	(e.g. |Vital.Web.JSON.true|) are encoded into corresponding javascript
	tokens (e.g. 'true').
>
	echo s:JSON.encode([s:JSON.true, s:JSON.false, s:JSON.null])
	" => '[true, false, null]'
<
	{settings} is a |Dictionary| which allows the following:

	'indent'
	The number of spaces used as an indentation. When the value is greater
	than 0, the encoded JSON will be formatted with the specified indent
	level. The default value is 0.
>
	echo s:JSON.encode({'a': 0, 'b': 1})
	" => '{"a":0,"b":1}'
	echo s:JSON.encode({'a': 0, 'b': 1}, {'indent': 2})
	" => '{
	"   "a": 0,
	"   "b": 1
	" }'
<
        'allow_nan'
        If 'allows_nan' is 0, it will raise an exception when serializing
        out of range float values (nan, inf, -inf).
        Otherwise 'NaN', 'Infinity' or '-Infinity' are used to represent these.
	The default value is 1.
	Note that NaN and Infinity are not the JSON standard.
>
	echo s:JSON.encode([0.0/0, 1.0/0, -1.0/0])
	" => [NaN,Infinity,-Infinity]
	echo s:JSON.encode([0.0/0], {'allow_nan': 0})
        " => vital: Web.JSON: Invalid float value: nan
<
        'ensure_ascii'
        If 'ensure_ascii' is 0, all characters without control-chars
        (0x01-0x1f) will be output as-is.
        Otherwise the output is guaranteed to have all incoming non-ASCII
        characters escaped.
	The default value is 0.
>
	echo s:JSON.encode(["foo", "bár", "\n"])
	" => '["foo","bár","\n"]'
	echo s:JSON.encode(["foo", "bár", "\n"], {'ensure_ascii': 1})
	" => '["foo","b\u00e1r","\n"]'
<
decode({json}[, {settings}])		*Vital.Web.JSON.decode()*
	Decode a JSON string into an object that vim can treat.
	{settings} is a |Dictionary| which allows the following:

	'use_token'
	Use special tokens (e.g. |Vital.Web.JSON.true|) to represent
	corresponding javascript tokens (e.g. 'true').
	Otherwise |v:true|, |v:false| or |v:null| are used to represent these.
	The default value is 0.
>
	echo s:JSON.decode('[true, false, null]')
	" => [1, 0, 0]
	echo s:JSON.decode('[true, false, null]', {'use_token': 1})
	" => [s:JSON.true, s:JSON.false, s:JSON.null]
<
        'allow_nan'
        If 'allows_nan' is 0, it will raise an exception when deserializing
        float constants ('NaN', 'Infinity', '-Infinity').
        Otherwise nan, inf or -inf are used to represent these.
	The default value is 1.
>
	echo s:JSON.decode('[NaN, Infinity, -Infinity]')
	" => [nan, inf, -inf]
	echo s:JSON.decode('[NaN]', {'allow_nan': 0})
	" => E121: Undefined variable: NaN
<

=============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
